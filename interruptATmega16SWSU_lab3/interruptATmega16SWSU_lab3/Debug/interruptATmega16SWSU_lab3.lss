
interruptATmega16SWSU_lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ea  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000922  00000000  00000000  00000257  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f7  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c2  00000000  00000000  0000165b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000040  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000003e  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000068  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_1>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000168 <__bad_interrupt>:
 168:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000d4 <main>:


int main(void)
{
	// pins PA0 PC4 -> output
	DDRA |= (1 << PA0);
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8a bb       	out	0x1a, r24	; 26
	DDRC |= (1 << PC4);
  da:	84 b3       	in	r24, 0x14	; 20
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	84 bb       	out	0x14, r24	; 20
	// PC4 PA0 -> high
	PORTC |= (1 << PC4);
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1 << PA0);
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	8b bb       	out	0x1b, r24	; 27
	
	// turn on interrupt on INT0 INT1
	GICR |= (1 << INT0);
  ec:	8b b7       	in	r24, 0x3b	; 59
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1 << INT1);
  f2:	8b b7       	in	r24, 0x3b	; 59
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8b bf       	out	0x3b, r24	; 59
	// setup interrupts front -> FALLING
	// INT0
	MCUCR |= (1 << ISC01);
  f8:	85 b7       	in	r24, 0x35	; 53
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
  fe:	85 b7       	in	r24, 0x35	; 53
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	85 bf       	out	0x35, r24	; 53
	//INT1
	MCUCR |= (1 << ISC11);
 104:	85 b7       	in	r24, 0x35	; 53
 106:	88 60       	ori	r24, 0x08	; 8
 108:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	85 bf       	out	0x35, r24	; 53
	// enable interrupts
	asm("sei");
 110:	78 94       	sei
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x3e>

Disassembly of section .text.__vector_1:

00000114 <__vector_1>:
        //TODO:: DO NOTHING! 
    }
}

//handle for INT0
ISR(INT0_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	// blink 1x 1s
	PORTA &= ~(1 << PA0);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	9c e0       	ldi	r25, 0x0C	; 12
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_1+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_1+0x26>
 13a:	00 00       	nop
	_delay_ms(1000);
	PORTA |= (1 << PA0);
 13c:	8b b3       	in	r24, 0x1b	; 27
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	8b bb       	out	0x1b, r24	; 27
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

Disassembly of section .text.__vector_2:

0000006c <__vector_2>:

//handle for INT1
ISR(INT1_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
	// blink 3x 0.5s
	for(int f = 0; f <3; f++){
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	1a c0       	rjmp	.+52     	; 0xba <__vector_2+0x4e>
	PORTA &= ~(1 << PA0);
  86:	8b b3       	in	r24, 0x1b	; 27
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8b bb       	out	0x1b, r24	; 27
  8c:	4f e7       	ldi	r20, 0x7F	; 127
  8e:	8a e1       	ldi	r24, 0x1A	; 26
  90:	96 e0       	ldi	r25, 0x06	; 6
  92:	41 50       	subi	r20, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <__vector_2+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__vector_2+0x30>
  9c:	00 00       	nop
	_delay_ms(500);
	PORTA |= (1 << PA0);
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	4f e7       	ldi	r20, 0x7F	; 127
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	96 e0       	ldi	r25, 0x06	; 6
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__vector_2+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_2+0x48>
  b4:	00 00       	nop
}

//handle for INT1
ISR(INT1_vect){
	// blink 3x 0.5s
	for(int f = 0; f <3; f++){
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	23 30       	cpi	r18, 0x03	; 3
  bc:	31 05       	cpc	r19, r1
  be:	1c f3       	brlt	.-58     	; 0x86 <__vector_2+0x1a>
	PORTA &= ~(1 << PA0);
	_delay_ms(500);
	PORTA |= (1 << PA0);
	_delay_ms(500);
	}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	4f 91       	pop	r20
  c6:	3f 91       	pop	r19
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000170 <_fini>:
 170:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000172 <__funcs_on_exit>:
 172:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000174 <__simulator_exit>:
 174:	08 95       	ret

Disassembly of section .text.exit:

00000152 <exit>:
 152:	ec 01       	movw	r28, r24
 154:	0e 94 b9 00 	call	0x172	; 0x172 <__funcs_on_exit>
 158:	0e 94 b8 00 	call	0x170	; 0x170 <_fini>
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 ba 00 	call	0x174	; 0x174 <__simulator_exit>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 b6 00 	call	0x16c	; 0x16c <_Exit>

Disassembly of section .text._Exit:

0000016c <_Exit>:
 16c:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
