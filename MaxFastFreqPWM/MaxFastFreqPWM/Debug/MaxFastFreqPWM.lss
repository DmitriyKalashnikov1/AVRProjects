
MaxFastFreqPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000098f  00000000  00000000  000001d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000068e  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a7  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a4  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000132  00000132  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    000000b2  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	83 ed       	ldi	r24, 0xD3	; 211
  84:	90 e3       	ldi	r25, 0x30	; 48
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x10>
  90:	00 00       	nop
int main(void)
{	
	 _delay_ms(1000);
	 int speed = 1;
	//pin3&pin4&pin5&pin6&pin9&pin10 uno
	   DDRD |= (1 << DDD3);
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 60       	ori	r24, 0x08	; 8
  96:	8a b9       	out	0x0a, r24	; 10
	   DDRD |= (1 << DDD4);
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	8a b9       	out	0x0a, r24	; 10
	   DDRD |= (1 << DDD6);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8a b9       	out	0x0a, r24	; 10
	   DDRD |= (1 << DDD5);
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	8a b9       	out	0x0a, r24	; 10
	   DDRB |= (1 << DDB1);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	84 b9       	out	0x04, r24	; 4
	   DDRB |= (1 << DDB2);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	84 b9       	out	0x04, r24	; 4
	   // PD3&PD4&PD6&PD5&PB1&PB2 as output
	   
	   //zum pin to out
	   DDRB |= (1 << DDB0);
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	84 b9       	out	0x04, r24	; 4
	   
	   //beep
	   PORTB |= (1 << PB0);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	ef ef       	ldi	r30, 0xFF	; 255
  c4:	f0 e7       	ldi	r31, 0x70	; 112
  c6:	22 e0       	ldi	r18, 0x02	; 2
  c8:	e1 50       	subi	r30, 0x01	; 1
  ca:	f0 40       	sbci	r31, 0x00	; 0
  cc:	20 40       	sbci	r18, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
	   _delay_ms(50);
	   PORTB &= ~(1 << PB0);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	85 b9       	out	0x05, r24	; 5
	   
	   // set motor dir
	   PORTD |= (1 << PD3);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	8b b9       	out	0x0b, r24	; 11
	   PORTD &= ~(1 << PD4);
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	8b b9       	out	0x0b, r24	; 11
	   
	   PORTB |= (1 << PB2);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	85 b9       	out	0x05, r24	; 5
	   PORTB &= ~(1 << PD1);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	85 b9       	out	0x05, r24	; 5
	   
	   OCR0A = 100;
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	87 bd       	out	0x27, r24	; 39
	   OCR0B = 40;
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	88 bd       	out	0x28, r24	; 40
	   // set PWM for 50% duty cycle at 10bit
	   TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	80 6a       	ori	r24, 0xA0	; 160
  fe:	84 bd       	out	0x24, r24	; 36
	   // set non-inverting mode
	   TCCR0A |= (1 << WGM02) |  (1 << WGM00);
 100:	84 b5       	in	r24, 0x24	; 36
 102:	89 60       	ori	r24, 0x09	; 9
 104:	84 bd       	out	0x24, r24	; 36
	   // set 8bit phase correct PWM Mode
	   
	   TCCR0B |= (1 << CS00);
 106:	85 b5       	in	r24, 0x25	; 37
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	85 bd       	out	0x25, r24	; 37
#include <avr/portpins.h>

int main(void)
{	
	 _delay_ms(1000);
	 int speed = 1;
 10c:	91 e0       	ldi	r25, 0x01	; 1
	   TCCR0B |= (1 << CS00);
	   // set prescaler to 0 and starts PWM
    
	while(1)
    {
        OCR0A += speed;
 10e:	87 b5       	in	r24, 0x27	; 39
 110:	89 0f       	add	r24, r25
 112:	87 bd       	out	0x27, r24	; 39
        
        if (OCR0A > 254){
 114:	87 b5       	in	r24, 0x27	; 39
 116:	8f 3f       	cpi	r24, 0xFF	; 255
 118:	09 f4       	brne	.+2      	; 0x11c <main+0x9c>
	        speed = -1;
 11a:	9f ef       	ldi	r25, 0xFF	; 255
        }
        if (OCR0A < 1){
 11c:	87 b5       	in	r24, 0x27	; 39
 11e:	81 11       	cpse	r24, r1
 120:	01 c0       	rjmp	.+2      	; 0x124 <main+0xa4>
	        speed = 1;
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	ef e3       	ldi	r30, 0x3F	; 63
 126:	fc e9       	ldi	r31, 0x9C	; 156
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0xa8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0xae>
 12e:	00 00       	nop
 130:	ee cf       	rjmp	.-36     	; 0x10e <main+0x8e>
