
SerialNano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d92  00000000  00000000  00000327  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000777  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000037e  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000256  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000284  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000240  00000240  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 00000026  00000080  00000080  000000d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .text.main    00000042  00000182  00000182  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Init 00000016  0000020e  0000020e  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.USART_Transmit 0000000e  00000224  00000224  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Transmit_STR 0000002c  000001c4  000001c4  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.USART_Transmit_INT 000000dc  000000a6  000000a6  000000fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.USART_Receive 0000000e  00000232  00000232  00000286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.libgcc.mul 0000001e  000001f0  000001f0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000182 <main>:
#define UBRR (F_CPU/(BAUDRATE<<4))-1


int main(void)
{
	DDRD |= (1 << PD1);//TX on output
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	82 60       	ori	r24, 0x02	; 2
 186:	8a b9       	out	0x0a, r24	; 10
	
	USART_Init(103); // 9600
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	83 ed       	ldi	r24, 0xD3	; 211
 194:	90 e3       	ldi	r25, 0x30	; 48
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x14>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x1e>
 1a0:	00 00       	nop
	_delay_ms(1000);
	USART_Transmit_STR("Hello, this is serial echo example!\n ");
 1a2:	60 e8       	ldi	r22, 0x80	; 128
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit_STR>
	USART_Transmit_INT(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Transmit_INT>
	USART_Transmit('\n');
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
    while(1)
    {
		USART_Transmit(USART_Receive());
 1ba:	0e 94 19 01 	call	0x232	; 0x232 <USART_Receive>
 1be:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
 1c2:	fb cf       	rjmp	.-10     	; 0x1ba <main+0x38>

Disassembly of section .text.USART_Init:

0000020e <USART_Init>:

void USART_Init( unsigned int speed)//Инициализация модуля USART

{

	 UBRR0 = speed;
 20e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// 9600-8-E-1
	// That is, baudrate of 9600bps
	// 8 databits
	// Even parity
	// 1 stopbit
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0); // And enable interrupts
 216:	88 e9       	ldi	r24, 0x98	; 152
 218:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UPM01) | (1 << UCSZ01) | (1 << UCSZ00);
 21c:	86 e2       	ldi	r24, 0x26	; 38
 21e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 222:	08 95       	ret

Disassembly of section .text.USART_Transmit:

00000224 <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
 224:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 228:	95 ff       	sbrs	r25, 5
 22a:	fc cf       	rjmp	.-8      	; 0x224 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 22c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 230:	08 95       	ret

Disassembly of section .text.USART_Transmit_STR:

000001c4 <USART_Transmit_STR>:
}

void USART_Transmit_STR(const char *s)
{
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	6b 01       	movw	r12, r22
 1cc:	e8 2e       	mov	r14, r24
	while (*s != 0) {USART_Transmit(*s++);}
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <USART_Transmit_STR+0x18>
 1d0:	9f ef       	ldi	r25, 0xFF	; 255
 1d2:	c9 1a       	sub	r12, r25
 1d4:	d9 0a       	sbc	r13, r25
 1d6:	e9 0a       	sbc	r14, r25
 1d8:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
 1dc:	f6 01       	movw	r30, r12
 1de:	84 91       	lpm	r24, Z
 1e0:	e7 fc       	sbrc	r14, 7
 1e2:	80 81       	ld	r24, Z
 1e4:	81 11       	cpse	r24, r1
 1e6:	f4 cf       	rjmp	.-24     	; 0x1d0 <USART_Transmit_STR+0xc>
}
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

Disassembly of section .text.USART_Transmit_INT:

000000a6 <USART_Transmit_INT>:

void USART_Transmit_INT(unsigned int c)//	Отправка числа от 0000 до 9999
{
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ac 01       	movw	r20, r24
	unsigned char temp;
	c=c%10000;
  b8:	9c 01       	movw	r18, r24
  ba:	32 95       	swap	r19
  bc:	22 95       	swap	r18
  be:	2f 70       	andi	r18, 0x0F	; 15
  c0:	23 27       	eor	r18, r19
  c2:	3f 70       	andi	r19, 0x0F	; 15
  c4:	23 27       	eor	r18, r19
  c6:	a7 e4       	ldi	r26, 0x47	; 71
  c8:	b3 e0       	ldi	r27, 0x03	; 3
  ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__umulhisi3>
  ce:	8c 01       	movw	r16, r24
  d0:	16 95       	lsr	r17
  d2:	07 95       	ror	r16
  d4:	16 95       	lsr	r17
  d6:	07 95       	ror	r16
  d8:	16 95       	lsr	r17
  da:	07 95       	ror	r16
  dc:	20 e1       	ldi	r18, 0x10	; 16
  de:	37 e2       	ldi	r19, 0x27	; 39
  e0:	02 9f       	mul	r16, r18
  e2:	c0 01       	movw	r24, r0
  e4:	03 9f       	mul	r16, r19
  e6:	90 0d       	add	r25, r0
  e8:	12 9f       	mul	r17, r18
  ea:	90 0d       	add	r25, r0
  ec:	11 24       	eor	r1, r1
  ee:	8a 01       	movw	r16, r20
  f0:	08 1b       	sub	r16, r24
  f2:	19 0b       	sbc	r17, r25
	temp=c/100;
  f4:	68 01       	movw	r12, r16
  f6:	d6 94       	lsr	r13
  f8:	c7 94       	ror	r12
  fa:	d6 94       	lsr	r13
  fc:	c7 94       	ror	r12
  fe:	96 01       	movw	r18, r12
 100:	ab e7       	ldi	r26, 0x7B	; 123
 102:	b4 e1       	ldi	r27, 0x14	; 20
 104:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__umulhisi3>
 108:	7c 01       	movw	r14, r24
 10a:	f6 94       	lsr	r15
 10c:	e7 94       	ror	r14
	USART_Transmit(temp/10+'0');
 10e:	cd ec       	ldi	r28, 0xCD	; 205
 110:	ec 9e       	mul	r14, r28
 112:	d1 2d       	mov	r29, r1
 114:	11 24       	eor	r1, r1
 116:	d6 95       	lsr	r29
 118:	d6 95       	lsr	r29
 11a:	d6 95       	lsr	r29
 11c:	80 e3       	ldi	r24, 0x30	; 48
 11e:	8d 0f       	add	r24, r29
 120:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
	USART_Transmit(temp%10+'0');
 124:	dd 0f       	add	r29, r29
 126:	8d 2f       	mov	r24, r29
 128:	88 0f       	add	r24, r24
 12a:	88 0f       	add	r24, r24
 12c:	d8 0f       	add	r29, r24
 12e:	8e 2d       	mov	r24, r14
 130:	8d 1b       	sub	r24, r29
 132:	80 5d       	subi	r24, 0xD0	; 208
 134:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
	temp=c%100;;
 138:	24 e6       	ldi	r18, 0x64	; 100
 13a:	2e 9d       	mul	r18, r14
 13c:	c0 01       	movw	r24, r0
 13e:	2f 9d       	mul	r18, r15
 140:	90 0d       	add	r25, r0
 142:	11 24       	eor	r1, r1
 144:	08 1b       	sub	r16, r24
 146:	19 0b       	sbc	r17, r25
	USART_Transmit(temp/10+'0');
 148:	0c 9f       	mul	r16, r28
 14a:	c1 2d       	mov	r28, r1
 14c:	11 24       	eor	r1, r1
 14e:	c6 95       	lsr	r28
 150:	c6 95       	lsr	r28
 152:	c6 95       	lsr	r28
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	8c 0f       	add	r24, r28
 158:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
	USART_Transmit(temp%10+'0');
 15c:	cc 0f       	add	r28, r28
 15e:	8c 2f       	mov	r24, r28
 160:	88 0f       	add	r24, r24
 162:	88 0f       	add	r24, r24
 164:	c8 0f       	add	r28, r24
 166:	80 2f       	mov	r24, r16
 168:	8c 1b       	sub	r24, r28
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	0e 94 12 01 	call	0x224	; 0x224 <USART_Transmit>
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

Disassembly of section .text.USART_Receive:

00000232 <USART_Receive>:
unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
 232:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 236:	88 23       	and	r24, r24
 238:	e4 f7       	brge	.-8      	; 0x232 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
 23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 23e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000001f0 <__umulhisi3>:
 1f0:	a2 9f       	mul	r26, r18
 1f2:	b0 01       	movw	r22, r0
 1f4:	b3 9f       	mul	r27, r19
 1f6:	c0 01       	movw	r24, r0
 1f8:	a3 9f       	mul	r26, r19
 1fa:	70 0d       	add	r23, r0
 1fc:	81 1d       	adc	r24, r1
 1fe:	11 24       	eor	r1, r1
 200:	91 1d       	adc	r25, r1
 202:	b2 9f       	mul	r27, r18
 204:	70 0d       	add	r23, r0
 206:	81 1d       	adc	r24, r1
 208:	11 24       	eor	r1, r1
 20a:	91 1d       	adc	r25, r1
 20c:	08 95       	ret
