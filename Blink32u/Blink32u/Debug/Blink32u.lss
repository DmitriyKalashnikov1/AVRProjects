
Blink32u.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000145  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009fe  00000000  00000000  00000165  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000071f  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000247  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000262  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000be  000000be  00000112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000032  0000008c  0000008c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  68:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  6c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  70:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 46 00 	call	0x8c	; 0x8c <_etext>
  84:	0c 94 44 00 	jmp	0x88	; 0x88 <_exit>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>

Disassembly of section .text:

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

0000008c <main>:

int main(void)
{
	//init pin 3 arduino l, pin3 = pd0
	
	DDRD = (1 << PD0);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	8a b9       	out	0x0a, r24	; 10
	PORTD = (0 << PD0);
  90:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	89 e6       	ldi	r24, 0x69	; 105
  96:	98 e1       	ldi	r25, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x16>
  a2:	00 00       	nop
	
	while(1)
	{
		_delay_ms(500);
		PORTD = (1 << PD0);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	8d e3       	ldi	r24, 0x3D	; 61
  ac:	99 e4       	ldi	r25, 0x49	; 73
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x22>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x2c>
  b8:	00 00       	nop
		_delay_ms(1500);
		PORTD = (0 << PD0);
  ba:	1b b8       	out	0x0b, r1	; 11
  bc:	ea cf       	rjmp	.-44     	; 0x92 <main+0x6>
